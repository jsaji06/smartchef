{"ast":null,"code":"var _jsxFileName = \"/Users/joshuasaji/Projects/React Native/project/app/src/components/EditAssumedIngredient.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport '../App.css';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditAssumedIngredient(props) {\n  _s();\n  let ingredient = props.ingredient;\n  let [quantity, setQuantity] = useState(ingredient.assumedQuantity);\n  // let [quantityCategory, setQuantityCategory] = useState(\"none\");\n  let [unit, setUnit] = useState(ingredient.unit);\n  let [ingredientName, setIngredientName] = useState(ingredient.ingredientName);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Ingredient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n\n// export default function EditAssumedIngredient(props) {\n// //   const unit = props.ingredient.unit;\n\n//   let [selectedQuantity, setSelectedQuantity] = useState(0);\n//   let [ingredient, setIngredient] = useState({});\n//   let [unit, setUnit] = useState(\"\");\n//   let [name, setName] = useState(\"\");\n//   let [quantity, setQuantity] = useState(\"\");\n\n//     console.log(props);\n//     let ingredientUnit = props.ingredient.unit;\n//     console.log(ingredientUnit)\n//     setUnit(ingredientUnit);\n//     console.log(unit)\n//     setIngredient(props.ingredient);\n//     if (['kgs', 'g', 'lbs'].includes(unit.toLowerCase())) {\n//         setSelectedQuantity(1);\n//     } else if (['cups', 'tbsp', 'tsp', 'mL', 'L'].includes(unit.toLowerCase())) {\n//         setSelectedQuantity(2);\n//     } else if (['small', 'medium', 'large'].includes(unit.toLowerCase())) {\n//         setSelectedQuantity(3);\n//     } else {\n//         setSelectedQuantity(0);\n//     }\n//     // }, [props.ingredient]); // Run this whenever the unit changes \n\n// //   let handleQuantityClassification = (e) => {\n// //     console.log(e.target.value)\n// //     if(e.target.value === 'none') setSelectedQuantity(0)\n// //     else if(e.target.value === 'weight') setSelectedQuantity(1)\n// //     else if(e.target.value === 'volume') setSelectedQuantity(2)\n// //      else if(e.target.value === 'general') setSelectedQuantity(3)\n// //   }\n\n// //   let selectQuantityClassification = e => {\n\n// //     if(selectedQuantityInt == 2) e.target.value = 'weight'\n// //   }\n//   return (\n//     <div style={props.style}>\n//         <h1>Edit Recipe</h1>\n//         <input defaultValue={props.ingredient.assumedQuantity} type='number' onChange={(e) => {\n//             let copyIngredient = {...ingredient};\n//             copyIngredient.assumedQuantity = e.target.value;\n//             setIngredient(copyIngredient);\n\n//         }} />\n//         <div className='formFlex'>\n//                 <select value={unit} onChange={e => {\n//                     // let copyIngredient = {...ingredient}\n//                     // console.log(e.target.value)\n//                     // copyIngredient.unit = e.target.value\n//                     // setIngredient(copyIngredient);\n//                     setUnit(e.target.value)\n//                 }}>\n//                     <option value=\"kg\">kg</option>\n//                     <option value=\"lb\">lb</option>\n//                     <option value=\"g\">g</option>\n//                     <option value=\"milliliters\">milliliters</option>\n//                     <option value=\"liters\">liters</option>\n//                     <option value=\"cups\">cups</option>\n//                     <option value=\"tbsp\">tbsp</option>\n//                     <option value=\"tsp\">tsp</option>\n//                     <option value=\"small\">small</option>\n//                     <option value=\"medium\">medium</option>\n//                     <option value=\"large\">large</option>\n//                 </select>\n//         </div>\n//         <input value={props.ingredient.ingredientName} />\n//         <button onClick={() =>{ \n//             let quantity = document.getElementById('quantityClassification').value\n//             let weightQuantities = document.getElementById('weightQuantities').value\n//             let volume = document.getElementById(\"volumeQuantities\").value\n//             let genQuantities = document.getElementById('generalQuantities').value;\n\n//             if (quantity == 'none') {\n//                 props.setItemToEdit({ingredientName: props.ingredientName, assumedQuantity: quantity, unit: ''})\n//             } \n//             else if (quantity=='weight') {\n//                 props.setItemToEdit({ingredientName: props.ingredientName, assumedQuantity: quantity, unit: weightQuantities})\n\n//             }\n\n//             else if (quantity=='volume') {\n//                 props.setItemToEdit({ingredientName: props.ingredientName, assumedQuantity: quantity, unit: volume})\n\n//             }\n\n//             else if (quantity=='general') {\n//                 props.setItemToEdit({ingredientName: props.ingredientName, assumedQuantity: quantity, unit: genQuantities})\n\n//             }\n\n//         }}>Submit</button>\n//     </div>\n//   )\n// }\n//  \n_s(EditAssumedIngredient, \"2PVbTPuysv1ajw6h+Wn/3q/17Oc=\");\n_c = EditAssumedIngredient;\nvar _c;\n$RefreshReg$(_c, \"EditAssumedIngredient\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","EditAssumedIngredient","props","_s","ingredient","quantity","setQuantity","assumedQuantity","unit","setUnit","ingredientName","setIngredientName","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuasaji/Projects/React Native/project/app/src/components/EditAssumedIngredient.js"],"sourcesContent":["import React from 'react'\nimport { useState } from 'react';\nimport '../App.css'\nimport { useEffect } from 'react';\n\nexport default function EditAssumedIngredient(props) {\n    let ingredient = props.ingredient\n    let [quantity, setQuantity] = useState(ingredient.assumedQuantity);\n    // let [quantityCategory, setQuantityCategory] = useState(\"none\");\n    let [unit, setUnit] = useState(ingredient.unit)\n    let [ingredientName, setIngredientName] = useState(ingredient.ingredientName)\n    \n    return (\n        <div>\n            <h1>Edit Ingredient</h1>\n            \n        </div>\n    )\n}\n\n// export default function EditAssumedIngredient(props) {\n// //   const unit = props.ingredient.unit;\n\n//   let [selectedQuantity, setSelectedQuantity] = useState(0);\n//   let [ingredient, setIngredient] = useState({});\n//   let [unit, setUnit] = useState(\"\");\n//   let [name, setName] = useState(\"\");\n//   let [quantity, setQuantity] = useState(\"\");\n\n//     console.log(props);\n//     let ingredientUnit = props.ingredient.unit;\n//     console.log(ingredientUnit)\n//     setUnit(ingredientUnit);\n//     console.log(unit)\n//     setIngredient(props.ingredient);\n//     if (['kgs', 'g', 'lbs'].includes(unit.toLowerCase())) {\n//         setSelectedQuantity(1);\n//     } else if (['cups', 'tbsp', 'tsp', 'mL', 'L'].includes(unit.toLowerCase())) {\n//         setSelectedQuantity(2);\n//     } else if (['small', 'medium', 'large'].includes(unit.toLowerCase())) {\n//         setSelectedQuantity(3);\n//     } else {\n//         setSelectedQuantity(0);\n//     }\n//     // }, [props.ingredient]); // Run this whenever the unit changes \n\n// //   let handleQuantityClassification = (e) => {\n// //     console.log(e.target.value)\n// //     if(e.target.value === 'none') setSelectedQuantity(0)\n// //     else if(e.target.value === 'weight') setSelectedQuantity(1)\n// //     else if(e.target.value === 'volume') setSelectedQuantity(2)\n// //      else if(e.target.value === 'general') setSelectedQuantity(3)\n// //   }\n\n// //   let selectQuantityClassification = e => {\n\n// //     if(selectedQuantityInt == 2) e.target.value = 'weight'\n// //   }\n//   return (\n//     <div style={props.style}>\n//         <h1>Edit Recipe</h1>\n//         <input defaultValue={props.ingredient.assumedQuantity} type='number' onChange={(e) => {\n//             let copyIngredient = {...ingredient};\n//             copyIngredient.assumedQuantity = e.target.value;\n//             setIngredient(copyIngredient);\n\n//         }} />\n//         <div className='formFlex'>\n//                 <select value={unit} onChange={e => {\n//                     // let copyIngredient = {...ingredient}\n//                     // console.log(e.target.value)\n//                     // copyIngredient.unit = e.target.value\n//                     // setIngredient(copyIngredient);\n//                     setUnit(e.target.value)\n//                 }}>\n//                     <option value=\"kg\">kg</option>\n//                     <option value=\"lb\">lb</option>\n//                     <option value=\"g\">g</option>\n//                     <option value=\"milliliters\">milliliters</option>\n//                     <option value=\"liters\">liters</option>\n//                     <option value=\"cups\">cups</option>\n//                     <option value=\"tbsp\">tbsp</option>\n//                     <option value=\"tsp\">tsp</option>\n//                     <option value=\"small\">small</option>\n//                     <option value=\"medium\">medium</option>\n//                     <option value=\"large\">large</option>\n//                 </select>\n//         </div>\n//         <input value={props.ingredient.ingredientName} />\n//         <button onClick={() =>{ \n//             let quantity = document.getElementById('quantityClassification').value\n//             let weightQuantities = document.getElementById('weightQuantities').value\n//             let volume = document.getElementById(\"volumeQuantities\").value\n//             let genQuantities = document.getElementById('generalQuantities').value;\n\n//             if (quantity == 'none') {\n//                 props.setItemToEdit({ingredientName: props.ingredientName, assumedQuantity: quantity, unit: ''})\n//             } \n//             else if (quantity=='weight') {\n//                 props.setItemToEdit({ingredientName: props.ingredientName, assumedQuantity: quantity, unit: weightQuantities})\n                \n//             }\n            \n//             else if (quantity=='volume') {\n//                 props.setItemToEdit({ingredientName: props.ingredientName, assumedQuantity: quantity, unit: volume})\n                \n//             }\n\n//             else if (quantity=='general') {\n//                 props.setItemToEdit({ingredientName: props.ingredientName, assumedQuantity: quantity, unit: genQuantities})\n                \n//             }\n            \n//         }}>Submit</button>\n//     </div>\n//   )\n// }\n//  "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAO,YAAY;AACnB,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,qBAAqBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACjD,IAAIC,UAAU,GAAGF,KAAK,CAACE,UAAU;EACjC,IAAI,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAACO,UAAU,CAACG,eAAe,CAAC;EAClE;EACA,IAAI,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACO,UAAU,CAACI,IAAI,CAAC;EAC/C,IAAI,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAACO,UAAU,CAACM,cAAc,CAAC;EAE7E,oBACIV,OAAA;IAAAY,QAAA,eACIZ,OAAA;MAAAY,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvB,CAAC;AAEd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAAb,EAAA,CAhHwBF,qBAAqB;AAAAgB,EAAA,GAArBhB,qBAAqB;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}